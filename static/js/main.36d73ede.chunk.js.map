{"version":3,"sources":["tree.svg","components/CryptoList.js","components/NavBar.js","tracks.svg","components/TrainBorder.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoList","useState","coinList","setCoinList","useEffect","length","console","log","fetchCoinList","a","axios","get","then","res","data","catch","err","formatNumber","x","toString","replace","id","className","slice","map","coin","height","alt","name","src","image","substring","symbol","toUpperCase","current_price","toFixed","low_24h","high_24h","Math","sign","price_change_24h","style","color","price_change_percentage_24h","circulating_supply","numeral","format","market_cap","NavBar","Navbar","bg","variant","display","flexDirection","flexWrap","overflow","Brand","href","Nav","Link","Form","inline","FormControl","type","placeholder","Button","TrainBorder","tracks","App","logo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36d73ede.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tree.512693fd.svg\";","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport numeral from \"numeral\";\n\nconst CryptoList = () => {\n  const [coinList, setCoinList] = useState([]);\n\n  useEffect(() => {\n    if (coinList && coinList.length > 0) {\n      console.log(\"Coins loaded:\", coinList);\n    } else {\n      fetchCoinList();\n    }\n  }, [coinList]);\n\n  const fetchCoinList = async () => {\n    await axios\n      .get(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd\")\n      .then((res) => setCoinList(res.data))\n      .catch((err) => console.log(err));\n  };\n\n  const formatName = (name) => {\n    let formattedName;\n    if (name.length > 15) {\n      formattedName = `${name.substring(0, 12)}...`;\n    } else {\n      formattedName = name;\n    }\n    return formattedName;\n  };\n\n  const formatNumber = (x) => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  return (\n    <div id=\"crypto-list-div\">\n      <h2>Crypto Tracks</h2>\n      <table className=\"coin-table\">\n        <thead className=\"thead-light\">\n          <tr>\n            <th className=\"image-thead\"></th>\n            <th>Name</th>\n            <th>Symbol</th>\n            <th>Current Price</th>\n            <th>24h Low</th>\n            <th>24h High</th>\n            <th>24h Price Change</th>\n            <th>24h % Change</th>\n            <th>Coins in Circulation</th>\n            <th>Market Cap</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coinList && coinList.length > 10\n            ? coinList.slice(0, 100).map((coin) => (\n                <tr height=\"50px\" className=\"coin-container\" key={coin.id}>\n                  <td className=\"image-container\">\n                    <img\n                      className=\"coin-image\"\n                      alt={coin.name}\n                      src={coin.image}\n                    />\n                  </td>\n                  <td className=\"coin-list-name\">{formatName(coin.name)}</td>\n                  <td className=\"coin-list-symbol\">\n                    {coin.symbol.toUpperCase()}\n                  </td>\n                  <td className=\"coin-list-price\">\n                    ${formatNumber(coin.current_price.toFixed(2))}\n                  </td>\n                  <td className=\"coin-list-24low\">\n                    ${formatNumber(coin.low_24h.toFixed(2))}\n                  </td>\n                  <td className=\"coin-list-24high\">\n                    ${formatNumber(coin.high_24h.toFixed(2))}\n                  </td>\n\n                  {Math.sign(coin.price_change_24h) > 0 ? (\n                    <td\n                      className=\"coin-list-price-change\"\n                      style={{ color: \"#1c8815\" }}>\n                      ${formatNumber(coin.price_change_24h.toFixed(2))}\n                    </td>\n                  ) : (\n                    <td\n                      className=\"coin-list-price-change\"\n                      style={{ color: \"#c12a2a\" }}>\n                      ${formatNumber(coin.price_change_24h.toFixed(2))}\n                    </td>\n                  )}\n\n                  {Math.sign(coin.price_change_percentage_24h) > 0 ? (\n                    <td\n                      className=\"coin-list-percent-change\"\n                      style={{ color: \"#1c8815\" }}>\n                      {coin.price_change_percentage_24h.toFixed(2)}%\n                    </td>\n                  ) : (\n                    <td\n                      className=\"coin-list-price-change\"\n                      style={{ color: \"#c12a2a\" }}>\n                      {coin.price_change_percentage_24h.toFixed(2)}%\n                    </td>\n                  )}\n                  <td className=\"coin-list-circulation\">\n                    {coin.circulating_supply\n                      ? numeral(coin.circulating_supply)\n                          .format(\"0.0a\")\n                          .toUpperCase()\n                      : \"null\"}\n                  </td>\n                  <td className=\"coin-list-total-volume\">\n                    ${numeral(coin.market_cap).format(\"0.0a\").toUpperCase()}\n                  </td>\n                </tr>\n              ))\n            : null}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CryptoList;\n","import React from \"react\";\nimport { Navbar, Nav, Form, FormControl, Button } from \"react-bootstrap\";\n\nconst NavBar = () => {\n  return (\n    <Navbar\n      bg=\"primary\"\n      variant=\"dark\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        overflow: \"hidden\",\n      }}>\n      <Navbar.Brand href=\"#home\">Crypto Tracks</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#home\">Home</Nav.Link>\n        <Nav.Link href=\"#features\">Features</Nav.Link>\n        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n      </Nav>\n      <Form inline>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"mr-sm-2 search-input\"\n        />\n        <Button variant=\"outline-light\">Search</Button>\n      </Form>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","export default __webpack_public_path__ + \"static/media/tracks.0a43b862.svg\";","import React from \"react\";\nimport tracks from \"../tracks.svg\";\n\nconst TrainBorder = () => {\n  return (\n    <div id=\"traintrack-border\">\n      <img src={tracks} className=\"traintracks\" alt=\"logo\" />\n      <img src={tracks} className=\"traintracks\" alt=\"logo\" />\n      <img src={tracks} className=\"traintracks three\" alt=\"logo\" />\n      <img src={tracks} className=\"traintracks four\" alt=\"logo\" />\n    </div>\n  );\n};\n\nexport default TrainBorder;\n","import logo from \"./tree.svg\";\nimport \"./App.css\";\nimport \"./yeti.bootstrap.min.css\";\n\nimport CryptoList from \"./components/CryptoList\";\nimport NavBar from \"./components/NavBar\";\nimport TrainBorder from \"./components/TrainBorder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <NavBar />\n      <TrainBorder />\n      <CryptoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}